import IO;
import List;

class Generic<T,O>:

t: T;
o: O;

static create(t: T, o: O) -> Generic<T,O> {
    return Generic<T, O>(o=o, t=t);
}

generic <S> (mapper: (T, O -> S)) -> S {
    return mapper(t, o);
}


export class Main:

static mapper (t: int32, o: float64) -> [char] {
    if t + o.toInt32 =*= 32 {
        return "aye";
    } else {
        return "ney";
    }
}

export static main () {
    gen1 : Generic<int32, float64> = Generic<int32, float64>.create(-8, 40.0);
    str := gen1.generic(mapper**);
    IO.print(str);

    gen2 := Generic<int32, float64>.create(1, 30.0);
    str = gen2.generic(mapper**);
    IO.print(str);
}