import IO;

class G<T>:
    constructors;

    t: T;

    get() -> T {
        return t;
    }
class O<T>:
    constructors;

    t: T?;

    get() -> T? {
        return t;
    }

export class Main:

export static main() {
    IO.printInt(0);
    {
        test := O<int64>();
        if (test.get()) {
            IO.printInt(test.get()!);
        }
    }
    {
        test := O<int64>(t=2);
        if (test.get()) {
            IO.printInt(test.get()!);
        }
    }
    {
        test := O<int64?>();
        if (test.get()) {
            IO.printInt(test.get()!);
        }
    }
    {
        test := O<int64?>(t=4);
        if (test.get()) {
            IO.printInt(test.get()!);
        }
    }

    {
        test := G<int64>(t=5);
        IO.printInt(test.get());
    }
    {
        test := G<int64?>(t=6);
        if (test.get()) {
            IO.printInt(test.get()!);
        }
    }
    {
        test := G<int64?>(t=null); //TODO this null should not be necessary, but in the current state of constructors it is, the ToDo document has a note on this
        if (test.get()) {
            IO.printInt(test.get()!);
        }
    }
    IO.printInt(8);
}