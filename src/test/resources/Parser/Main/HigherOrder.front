import IO;
import List;
import Strings;

export class Test:

static doNothing <T> (t: T) -> T {
    alsoT:T = t;
    return alsoT;
}

static call <R,T,S> (f: (T,S->R), t: T, s: S) -> R {
    return f(t, s);
}

static call2 <R,T> (f: (T->R), t: T) -> R {
    return f(t);
}

static forEach <T,R> (l: List<T>, f: (T->R)) {
    i:int32 = 0;
    while i<l.size() {
        f(l.elements()[i]);
        i = i+1;
    }
}

static printInt(l: int64) {
    IO.print(Strings.intToString(l));
}

export static main() {
    list := List<int64>.create();
    i:int32 = 0;
    while i<=12 {
        list.add(i);
        i = i+1;
    }
    IO.print("1:");
    Test.forEach(list, printInt**);
    IO.print("\n2:");
    forEach(doNothing(list), doNothing(printInt**));
    IO.print("\n3:");
    asdf : (List<int64>, (int64->()) -> ()) = forEach**;
    call(asdf, list, printInt**);
    IO.print("\n4:");
    call(forEach**, list, printInt**);
    IO.print("\n5:");
    call(doNothing(forEach**), doNothing(list), doNothing(printInt**));
    //doNothing(doNothing**); this is invalid
    call(call2**, IO.print**([char]), "\ndone");
}