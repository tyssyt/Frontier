import List;

class IntList:

delegate * : l: List<int64>;

static create() -> IntList {
    return new IntList(l=List<int64>.create());
}


class Generic<T>:
delegate * : i: int32;
t: T;

static create(t: T, i: int32) -> Generic<T> {
    return new Generic<T>(i=i ,t=t);
}

doSthUseful<R>(fun: (T, int32 -> R)) -> R {
    return fun(t,i);
}

getT() -> T {
    return t;
}

class MoreGenerix<U>:
delegate doSthUseful, getT : baseGeneric: Generic<U>;

static create(baseGeneric: Generic<U>) -> MoreGenerix<U> {
    return new MoreGenerix<U>(baseGeneric=baseGeneric);
}

export class Outside:

export static main () {
    moregen := MoreGenerix<List<int64>>.create(Generic<List<int64>>.create(IntList.create(),49));
    i:int32 = moregen.doSthUseful(\i, j -> j.get(0) + i); //borked cause i and j is switched
}