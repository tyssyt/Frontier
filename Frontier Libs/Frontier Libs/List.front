export class List<T>:
    elements: T[] ;
    size: int32 = 0;

    export static create(startSize: int32 = 5) -> List<T> {
        res:List<T> = new List<T>(elements = new T[startSize]);
        return res;
    }

    export elements() -> T[] {
        return elements; //TODO if we have proper handling of fields in the instantiated shims this is no longer necessary
    }

    export size() -> int32 {
        return size; //TODO if we have proper handling of fields in the instantiated shims this is no longer necessary
    }

    export add(e: T) {
        if size >= elements.size {
            expand();
        }
        elements[size] = e;
        ++size;
    }

    export add(e: T, pos: int32) {
        if size >= elements.size {
            expand();
        }
        rShift(pos);
        elements[pos] = e;
        ++size;
    }

    export put(e: T, pos: int32) {
        elements[pos] = e;
    }

    export get(i: int32) -> T {
        return elements[i];
    }

    export clear() {
        size=0;
    }

    export remove() -> T {
        --size;
        return elements[size];
    }

    export remove(pos: int32) -> T {
        res:T = elements[pos];
        lShift(pos);
        --size;
        return res;
    }

    private expand() {
        newSize:int32 = 2*elements.size;
        if newSize < 10 {
            newSize = 10;
        }

        newElements := new T[newSize];
        arrayCopy(elements, newElements);
        elements = newElements;
    }

    private rShift(start: int32) { //TODO replace by arrayCopy... once we have that
        i := size;
        while i>start {
            elements[i] = elements[i-1];
            --i;
        }
    }

    private lShift(end: int32) { //TODO replace by arrayCopy... once we have that
        i := end;
        while i<size-1 {
            elements[i] = elements[i+1];
            ++i;
        }
    }

    private static arrayCopy(from: T[], to: T[]) { //TODO replace by arrayCopy... once we have that
        i:int32 = 0;
        while i<from.size {
            to[i] = from[i];
            ++i;
        }
    }