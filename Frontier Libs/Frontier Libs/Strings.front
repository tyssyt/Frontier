import Native;

export namespace Strings:

    export parseInt(string: [char]) -> int64 {
        res: int64 = 0;

        i: int32 = 0;
        //check for first char '-'
        isNegative := string[0] =*= 45;

        if isNegative {
            i = i+1;
        }

        while i < string.size {
            res = res * 10;
            res = res + charToInt(string[i]);
            i = i+1;
        }

        if isNegative {
            res = -1 * res;
        }

        return res;
    }

    export intToString(l: int64) -> [char] {
        if l =*= 0 {
            res := new char[1]; //TODO make return "0" work.
            res[0] = "0";
            return res;
        }
        pos:bool = l >= 0;
        if !pos {
            l = l * -1;
        }
        size:int32 = (int32)((float64)(l+1)).log10().ceil();
        if (!pos) {
            size = size+1;
        }

        digits:[char] = new char[size];
        i:int32 = 1;
        while i<=size {
            remainder:int64 = l % 10;
            digits[size-i] = intToChar((int32)remainder);
            l = l / 10;
            i = i+1;
        }

        if (!pos) {
            digits[0] = "-";
        }
        return digits;
    }

    export intToBitString(l: int64) -> [char] {
        digits:[char] = new char[64];
        i:int32 = 1;
        while i<=64 {
            remainder:int64 = l % 2;
            digits[64-i] = intToChar((int32)remainder);
            l = l.uShiftR(1);
            i = i+1;
        }
        return digits;
    }

    /*
     * Interprets 'l' as binary digits, with the leftmost bit being the 8 bit.
     * Returns the number in front of the dot followed by the dot followed by digits
     * Prints at most 'digits' many decimal digits
     */
    static fractionToString(l: int64, maxDigits: int32) -> [char], bool {
        size: int32 =  60 - (int32) l.countTrailingZeros();
        rounding := size > maxDigits;
        if rounding {
            size = maxDigits;
        }

        size = size + 2;
        digits:[char] = new char[size];

        {
            digit := l.uShiftR(60);
            digits[0] = intToChar((int32)digit);
        }
        digits[1] = ".";

        i:int32 = 2;
        while i < size {
            //clear top 4 bits
            l = l & 1152921504606846975; //0b1111 << 60 TODO bin literals?

            //multiply by 10 to get the next number in the top 4 bits
            l = l*10;

            //print top 4 bits as next digit
            digit := l.uShiftR(60);
            digits[i] = intToChar((int32)digit);

            i = i+1;
        }

        if !rounding {
            return digits, false;
        }

        l = l & 1152921504606846975; //0b1111 << 60 TODO bin literals?
        //don't shift in top 4, just check it the remaining number is bigger then 0.5

        if l <= 576460752303423488 { // 1 << 59 TODO
            return digits, false; //rounding down means no change to the digits
        }

        //we need to round up, go through digits back to front as long as there are 9s, increase the first non 9 encountered
        i = size-1;
        while i > 1 {
            if digits[i] =!= "9" {
                digits[i] = digits[i] + 1;
                break;
            }
            i = i - 1;
        }

        if i == size-1 {
            return digits, false; //no digits zeroed by rounding
        }

        if i =!= 1 { //we found a non 9 digit before the dot, shorten the result
            newDigits := new char[i+1];
            digits.copy(newDigits, length=i+1);
            return newDigits, false;
        }

        digit := new char[1];
        if digits[0] =!= 9 {
            digit[0] = digits[0] + 1;
            return digit, false;
        } else {
            digit[0] = "1";
            return digit, true;
        }
    }

    //TODO for small exponents, print the full number instead of scientific notation
    //TODO figure out to what precision we can reasonably round, also figure out if the magic number table is still precise at that precision
    export float32ToString(f: float32, decimals: int32 = 4) -> [char] {
        //decimals = decimals.clamp(0, ???); TODO

        sign:, exponent:, mantissa: = f.splitRepresentation();

        if exponent == 255 { //special floats
            if mantissa == 0 {
                if sign {
                    return "-∞";
                } else {
                    inf := new char[1]; //TODO make returning char literals in function with return type string work
                    inf[0] ="∞";
                    return inf;
                }
            } else {
                return "NaN";
            }
        }

        if exponent =!= 0 { // if not denormalised, the 24th bit is implicitly assumed to be 1
            mantissa = mantissa + 8388608; // 1 << 23 implicit 24th bit TODO
        }

        //lookup decimal exponent and mantissa factors
        decimalExponent:, mantissaFactor:, mantissaOverflowFactor: = LookupTables.float32ToStringLookupTable[exponent];

        //mantissa factor * mantissa might be > 10, in which case we need to divide it by 10 and increase the exponent
        decMantissa:, overflow: = mantissaFactor.unsignedMultiplicationWithOverflow(mantissa);
        if overflow || ( decMantissa < 0  && decMantissa >= -6917529027641081856 ) { //TODO a > 10<<60 would be way nicer but we only have signed
            //division by 10 is weird with using the overflow bit, so instead we multiply the mantissa with mantissaFactor/10
            decMantissa = mantissa * mantissaOverflowFactor;
            decimalExponent = decimalExponent + 1;
        }

        //build parts
        decimalsString:, overflow = fractionToString(decMantissa, decimals); //TODO avoid intermediate [char]
        if overflow { //if the mantissa is 9.9... rounding might cause it to be 10, which we represent as 1 with an increased exponent
            decimalExponent = decimalExponent + 1;
        }
        exponentString := intToString(decimalExponent); //TODO avoid intermediate [char]

        //assemble Result
        if sign {
            size: int32 = 2 + decimalsString.size + exponentString.size;
            res := new char[size];
            res[0] = "-";
            decimalsString.copy(res, targetOffset=1);
            res[1+decimalsString.size] = "e";
            exponentString.copy(res, targetOffset=2+decimalsString.size);
            return res;
        } else {
            size: int32 = 1 + decimalsString.size + exponentString.size;
            res := new char[size];
            decimalsString.copy(res);
            res[decimalsString.size] = "e";
            exponentString.copy(res, targetOffset=1+decimalsString.size);
            return res;
        }
    }

    export toCString(fString: [char]) -> native[char] {
        return withZeroTerminator(fString).c_array();
    }

    export withZeroTerminator(fString: [char]) -> [char] { //TODO should assert that fString does not contain 0
        if fString[fString.size - 1] =*= 0 {
            return fString;
        }
        cString := new char[fString.size + 1];
        for c, i : fString {
            cString[i] = c; //TODO replace by arrayCopy
        }
        cString[fString.size] = 0;
        return cString;
    }

    export startsWith(string: [char], start: [char]) -> bool {
        if start.size > string.size {
            return false;
        }
        for c, i : start {
            if c =!= string[i] {
                return false;
            }
        }
        return true;
    }

    charToInt(c: char) -> int32 {
        //assert c >= 48 && c <= 57 //TODO
        return c - 48;
    }

    export intToChar(i: int32) -> char { //input must be between 0 and 9 inclusive
        return (char) i + 48;
    }

class LookupTables:

    static float32ToStringLookupTable : [(int32, int64, int64)] = createFloat32ToStringLookupTable();

    static createFloat32ToStringLookupTable() -> [(int32, int64, int64)] {
        //a bunch of magic numbers, how I came up with them is left as an exercise for the reader
        table := new (int32, int64, int64)[255];
        table[0] = -38, 161558713389, 16155871338; //denormalised
        table[1] = -38, 161558713389, 16155871338;
        table[2] = -38, 323117426778, 32311742677;
        table[3] = -38, 646234853557, 64623485355;
        table[4] = -38, 1292469707114, 129246970711;
        table[5] = -37, 258493941422, 25849394142;
        table[6] = -37, 516987882845, 51698788284;
        table[7] = -37, 1033975765691, 103397576569;
        table[8] = -36, 206795153138, 20679515313;
        table[9] = -36, 413590306276, 41359030627;
        table[10] = -36, 827180612553, 82718061255;
        table[11] = -35, 165436122510, 16543612251;
        table[12] = -35, 330872245021, 33087224502;
        table[13] = -35, 661744490042, 66174449004;
        table[14] = -35, 1323488980084, 132348898008;
        table[15] = -34, 264697796016, 26469779601;
        table[16] = -34, 529395592033, 52939559203;
        table[17] = -34, 1058791184067, 105879118406;
        table[18] = -33, 211758236813, 21175823681;
        table[19] = -33, 423516473627, 42351647362;
        table[20] = -33, 847032947254, 84703294725;
        table[21] = -32, 169406589450, 16940658945;
        table[22] = -32, 338813178901, 33881317890;
        table[23] = -32, 677626357803, 67762635780;
        table[24] = -32, 1355252715606, 135525271560;
        table[25] = -31, 271050543121, 27105054312;
        table[26] = -31, 542101086242, 54210108624;
        table[27] = -31, 1084202172485, 108420217248;
        table[28] = -30, 216840434497, 21684043449;
        table[29] = -30, 433680868994, 43368086899;
        table[30] = -30, 867361737988, 86736173798;
        table[31] = -29, 173472347597, 17347234759;
        table[32] = -29, 346944695195, 34694469519;
        table[33] = -29, 693889390390, 69388939039;
        table[34] = -28, 138777878078, 13877787807;
        table[35] = -28, 277555756156, 27755575615;
        table[36] = -28, 555111512312, 55511151231;
        table[37] = -28, 1110223024625, 111022302462;
        table[38] = -27, 222044604925, 22204460492;
        table[39] = -27, 444089209850, 44408920985;
        table[40] = -27, 888178419700, 88817841970;
        table[41] = -26, 177635683940, 17763568394;
        table[42] = -26, 355271367880, 35527136788;
        table[43] = -26, 710542735760, 71054273576;
        table[44] = -25, 142108547152, 14210854715;
        table[45] = -25, 284217094304, 28421709430;
        table[46] = -25, 568434188608, 56843418860;
        table[47] = -25, 1136868377216, 113686837721;
        table[48] = -24, 227373675443, 22737367544;
        table[49] = -24, 454747350886, 45474735088;
        table[50] = -24, 909494701772, 90949470177;
        table[51] = -23, 181898940354, 18189894035;
        table[52] = -23, 363797880709, 36379788070;
        table[53] = -23, 727595761418, 72759576141;
        table[54] = -22, 145519152283, 14551915228;
        table[55] = -22, 291038304567, 29103830456;
        table[56] = -22, 582076609134, 58207660913;
        table[57] = -22, 1164153218269, 116415321826;
        table[58] = -21, 232830643653, 23283064365;
        table[59] = -21, 465661287307, 46566128730;
        table[60] = -21, 931322574615, 93132257461;
        table[61] = -20, 186264514923, 18626451492;
        table[62] = -20, 372529029846, 37252902984;
        table[63] = -20, 745058059692, 74505805969;
        table[64] = -19, 149011611938, 14901161193;
        table[65] = -19, 298023223876, 29802322387;
        table[66] = -19, 596046447753, 59604644775;
        table[67] = -19, 1192092895507, 119209289550;
        table[68] = -18, 238418579101, 23841857910;
        table[69] = -18, 476837158203, 47683715820;
        table[70] = -18, 953674316406, 95367431640;
        table[71] = -17, 190734863281, 19073486328;
        table[72] = -17, 381469726562, 38146972656;
        table[73] = -17, 762939453125, 76293945312;
        table[74] = -16, 152587890625, 15258789062;
        table[75] = -16, 305175781250, 30517578125;
        table[76] = -16, 610351562500, 61035156250;
        table[77] = -16, 1220703125000, 122070312500;
        table[78] = -15, 244140625000, 24414062500;
        table[79] = -15, 488281250000, 48828125000;
        table[80] = -15, 976562500000, 97656250000;
        table[81] = -14, 195312500000, 19531250000;
        table[82] = -14, 390625000000, 39062500000;
        table[83] = -14, 781250000000, 78125000000;
        table[84] = -13, 156250000000, 15625000000;
        table[85] = -13, 312500000000, 31250000000;
        table[86] = -13, 625000000000, 62500000000;
        table[87] = -13, 1250000000000, 125000000000;
        table[88] = -12, 250000000000, 25000000000;
        table[89] = -12, 500000000000, 50000000000;
        table[90] = -12, 1000000000000, 100000000000;
        table[91] = -11, 200000000000, 20000000000;
        table[92] = -11, 400000000000, 40000000000;
        table[93] = -11, 800000000000, 80000000000;
        table[94] = -10, 160000000000, 16000000000;
        table[95] = -10, 320000000000, 32000000000;
        table[96] = -10, 640000000000, 64000000000;
        table[97] = -10, 1280000000000, 128000000000;
        table[98] = -9, 256000000000, 25600000000;
        table[99] = -9, 512000000000, 51200000000;
        table[100] = -9, 1024000000000, 102400000000;
        table[101] = -8, 204800000000, 20480000000;
        table[102] = -8, 409600000000, 40960000000;
        table[103] = -8, 819200000000, 81920000000;
        table[104] = -7, 163840000000, 16384000000;
        table[105] = -7, 327680000000, 32768000000;
        table[106] = -7, 655360000000, 65536000000;
        table[107] = -7, 1310720000000, 131072000000;
        table[108] = -6, 262144000000, 26214400000;
        table[109] = -6, 524288000000, 52428800000;
        table[110] = -6, 1048576000000, 104857600000;
        table[111] = -5, 209715200000, 20971520000;
        table[112] = -5, 419430400000, 41943040000;
        table[113] = -5, 838860800000, 83886080000;
        table[114] = -4, 167772160000, 16777216000;
        table[115] = -4, 335544320000, 33554432000;
        table[116] = -4, 671088640000, 67108864000;
        table[117] = -4, 1342177280000, 134217728000;
        table[118] = -3, 268435456000, 26843545600;
        table[119] = -3, 536870912000, 53687091200;
        table[120] = -3, 1073741824000, 107374182400;
        table[121] = -2, 214748364800, 21474836480;
        table[122] = -2, 429496729600, 42949672960;
        table[123] = -2, 858993459200, 85899345920;
        table[124] = -1, 171798691840, 17179869184;
        table[125] = -1, 343597383680, 34359738368;
        table[126] = -1, 687194767360, 68719476736;
        table[127] = 0, 137438953473, 13743895347;
        table[128] = 0, 274877906945, 27487790694;
        table[129] = 0, 549755813889, 54975581388;
        table[130] = 0, 1099511627777, 109951162777;
        table[131] = 1, 219902325555, 21990232555;
        table[132] = 1, 439804651110, 43980465111;
        table[133] = 1, 879609302220, 87960930222;
        table[134] = 2, 175921860444, 17592186044;
        table[135] = 2, 351843720888, 35184372088;
        table[136] = 2, 703687441776, 70368744177;
        table[137] = 3, 140737488355, 14073748835;
        table[138] = 3, 281474976710, 28147497671;
        table[139] = 3, 562949953421, 56294995342;
        table[140] = 3, 1125899906842, 112589990684;
        table[141] = 4, 225179981368, 22517998136;
        table[142] = 4, 450359962737, 45035996273;
        table[143] = 4, 900719925474, 90071992547;
        table[144] = 5, 180143985094, 18014398509;
        table[145] = 5, 360287970189, 36028797018;
        table[146] = 5, 720575940379, 72057594037;
        table[147] = 6, 144115188075, 14411518807;
        table[148] = 6, 288230376151, 28823037615;
        table[149] = 6, 576460752303, 57646075230;
        table[150] = 6, 1152921504606, 115292150460;
        table[151] = 7, 230584300921, 23058430092;
        table[152] = 7, 461168601842, 46116860184;
        table[153] = 7, 922337203685, 92233720368;
        table[154] = 8, 184467440737, 18446744073;
        table[155] = 8, 368934881474, 36893488147;
        table[156] = 8, 737869762948, 73786976294;
        table[157] = 9, 147573952589, 14757395258;
        table[158] = 9, 295147905179, 29514790517;
        table[159] = 9, 590295810358, 59029581035;
        table[160] = 9, 1180591620717, 118059162071;
        table[161] = 10, 236118324143, 23611832414;
        table[162] = 10, 472236648286, 47223664828;
        table[163] = 10, 944473296573, 94447329657;
        table[164] = 11, 188894659314, 18889465931;
        table[165] = 11, 377789318629, 37778931862;
        table[166] = 11, 755578637259, 75557863725;
        table[167] = 12, 151115727451, 15111572745;
        table[168] = 12, 302231454903, 30223145490;
        table[169] = 12, 604462909807, 60446290980;
        table[170] = 12, 1208925819614, 120892581961;
        table[171] = 13, 241785163922, 24178516392;
        table[172] = 13, 483570327845, 48357032784;
        table[173] = 13, 967140655691, 96714065569;
        table[174] = 14, 193428131138, 19342813113;
        table[175] = 14, 386856262276, 38685626227;
        table[176] = 14, 773712524553, 77371252455;
        table[177] = 15, 154742504910, 15474250491;
        table[178] = 15, 309485009821, 30948500982;
        table[179] = 15, 618970019642, 61897001964;
        table[180] = 15, 1237940039285, 123794003928;
        table[181] = 16, 247588007857, 24758800785;
        table[182] = 16, 495176015714, 49517601571;
        table[183] = 16, 990352031428, 99035203142;
        table[184] = 17, 198070406285, 19807040628;
        table[185] = 17, 396140812571, 39614081257;
        table[186] = 17, 792281625142, 79228162514;
        table[187] = 18, 158456325028, 15845632502;
        table[188] = 18, 316912650057, 31691265005;
        table[189] = 18, 633825300114, 63382530011;
        table[190] = 18, 1267650600228, 126765060022;
        table[191] = 19, 253530120045, 25353012004;
        table[192] = 19, 507060240091, 50706024009;
        table[193] = 19, 1014120480182, 101412048018;
        table[194] = 20, 202824096036, 20282409603;
        table[195] = 20, 405648192073, 40564819207;
        table[196] = 20, 811296384146, 81129638414;
        table[197] = 21, 162259276829, 16225927682;
        table[198] = 21, 324518553658, 32451855365;
        table[199] = 21, 649037107316, 64903710731;
        table[200] = 21, 1298074214633, 129807421463;
        table[201] = 22, 259614842926, 25961484292;
        table[202] = 22, 519229685853, 51922968585;
        table[203] = 22, 1038459371706, 103845937170;
        table[204] = 23, 207691874341, 20769187434;
        table[205] = 23, 415383748682, 41538374868;
        table[206] = 23, 830767497365, 83076749736;
        table[207] = 24, 166153499473, 16615349947;
        table[208] = 24, 332306998946, 33230699894;
        table[209] = 24, 664613997892, 66461399789;
        table[210] = 24, 1329227995784, 132922799578;
        table[211] = 25, 265845599156, 26584559915;
        table[212] = 25, 531691198313, 53169119831;
        table[213] = 25, 1063382396627, 106338239662;
        table[214] = 26, 212676479325, 21267647932;
        table[215] = 26, 425352958651, 42535295865;
        table[216] = 26, 850705917302, 85070591730;
        table[217] = 27, 170141183460, 17014118346;
        table[218] = 27, 340282366920, 34028236692;
        table[219] = 27, 680564733841, 68056473384;
        table[220] = 27, 1361129467683, 136112946768;
        table[221] = 28, 272225893536, 27222589353;
        table[222] = 28, 544451787073, 54445178707;
        table[223] = 28, 1088903574147, 108890357414;
        table[224] = 29, 217780714829, 21778071482;
        table[225] = 29, 435561429658, 43556142965;
        table[226] = 29, 871122859317, 87112285931;
        table[227] = 30, 174224571863, 17422457186;
        table[228] = 30, 348449143727, 34844914372;
        table[229] = 30, 696898287454, 69689828745;
        table[230] = 31, 139379657490, 13937965749;
        table[231] = 31, 278759314981, 27875931498;
        table[232] = 31, 557518629963, 55751862996;
        table[233] = 31, 1115037259926, 111503725992;
        table[234] = 32, 223007451985, 22300745198;
        table[235] = 32, 446014903970, 44601490397;
        table[236] = 32, 892029807941, 89202980794;
        table[237] = 33, 178405961588, 17840596158;
        table[238] = 33, 356811923176, 35681192317;
        table[239] = 33, 713623846352, 71362384635;
        table[240] = 34, 142724769270, 14272476927;
        table[241] = 34, 285449538541, 28544953854;
        table[242] = 34, 570899077082, 57089907708;
        table[243] = 34, 1141798154164, 114179815416;
        table[244] = 35, 228359630832, 22835963083;
        table[245] = 35, 456719261665, 45671926166;
        table[246] = 35, 913438523331, 91343852333;
        table[247] = 36, 182687704666, 18268770466;
        table[248] = 36, 365375409332, 36537540933;
        table[249] = 36, 730750818665, 73075081866;
        table[250] = 37, 146150163733, 14615016373;
        table[251] = 37, 292300327466, 29230032746;
        table[252] = 37, 584600654932, 58460065493;
        table[253] = 37, 1169201309864, 116920130986;
        table[254] = 38, 233840261972, 23384026197;
        return table;
    }